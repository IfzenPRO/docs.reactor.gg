(self.webpackChunkdropship_website_docs=self.webpackChunkdropship_website_docs||[]).push([[435],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return c}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),d=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),g=d(t),c=o,m=g["".concat(u,".").concat(c)]||g[c]||s[c]||i;return t?r.createElement(m,a(a({ref:n},l),{},{components:t})):r.createElement(m,a({ref:n},l))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var p={};for(var u in n)hasOwnProperty.call(n,u)&&(p[u]=n[u]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2694:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return s}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a=["components"],p={title:"Debugging"},u={unversionedId:"bepinex_and_harmony/debugging",id:"bepinex_and_harmony/debugging",isDocsHomePage:!1,title:"Debugging",description:"Intro to debugging your mod",source:"@site/docs/bepinex_and_harmony/debugging.md",sourceDirName:"bepinex_and_harmony",slug:"/bepinex_and_harmony/debugging",permalink:"/bepinex_and_harmony/debugging",editUrl:"https://github.com/NuclearPowered/docs.reactor.gg/blob/master/docs/bepinex_and_harmony/debugging.md",version:"current",frontMatter:{title:"Debugging"},sidebar:"docs",previous:{title:"Harmony Guide",permalink:"/bepinex_and_harmony/harmony_guide"}},d=[{value:"Intro to debugging your mod",id:"intro-to-debugging-your-mod",children:[]},{value:"Reactor.Debugger",id:"reactordebugger",children:[]},{value:"Debugging using your IDE",id:"debugging-using-your-ide",children:[{value:"Rider",id:"rider",children:[]},{value:"VS",id:"vs",children:[]}]}],l={toc:d};function s(e){var n=e.components,p=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},l,p,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"intro-to-debugging-your-mod"},"Intro to debugging your mod"),(0,i.kt)("p",null,"Before launching your mod, we highly recommend for you to turn on bepinex's console for Among Us.\nHead on to the path to your Among Us install. From there, go into ",(0,i.kt)("inlineCode",{parentName:"p"},"BepInEx/config"),".\nYou should see the file ",(0,i.kt)("inlineCode",{parentName:"p"},"BepInEx.cfg"),". Open up the ",(0,i.kt)("inlineCode",{parentName:"p"},"BepInEx.cfg")," file and find the header\n",(0,i.kt)("inlineCode",{parentName:"p"},"[Logging.Console]")," and change ",(0,i.kt)("inlineCode",{parentName:"p"},"Enabled = false")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Enabled = true")),(0,i.kt)("h2",{id:"reactordebugger"},"Reactor.Debugger"),(0,i.kt)("p",null,"If you wish to start the game with less than 4 clients, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Reactor.Debugger"),(0,i.kt)("br",{parentName:"p"}),"\n","Download ",(0,i.kt)("a",{parentName:"p",href:"https://nightly.link/NuclearPowered/Reactor/workflows/main/master/Reactor.Debugger.dll"},"Reactor.Debugger.dll")," and copy to your ",(0,i.kt)("inlineCode",{parentName:"p"},"BepInEx/plugins")),(0,i.kt)("h2",{id:"debugging-using-your-ide"},"Debugging using your IDE"),(0,i.kt)("h3",{id:"rider"},"Rider"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open your ",(0,i.kt)("inlineCode",{parentName:"p"},"doorstop_config.ini")," and set your ",(0,i.kt)("inlineCode",{parentName:"p"},"debugEnabled")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," like that"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ini",metastring:"title=doorstop_config.ini",title:"doorstop_config.ini"},"# Specifies whether the mono soft debugger is enabled\ndebugEnabled=true\n# Specifies whether the mono soft debugger should suspend the process and wait for the remote debugger\ndebugSuspend=false\n")),(0,i.kt)("p",{parentName:"li"},"You can also enable ",(0,i.kt)("inlineCode",{parentName:"p"},"debugSuspend")," if you need to debug something in for example your ",(0,i.kt)("inlineCode",{parentName:"p"},"Load")," method, otherwise you are going to save few seconds by not waiting for the loading screen.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make sure to copy ",(0,i.kt)("inlineCode",{parentName:"p"},".pdb")," alongisde your mod's ",(0,i.kt)("inlineCode",{parentName:"p"},".dll")," to plugins folder (reactor mod template does that by default)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Mono Remote")," run configuration\n",(0,i.kt)("img",{alt:"Step 1",src:t(395).Z}),"\n",(0,i.kt)("img",{alt:"Step 2",src:t(7820).Z}),(0,i.kt)("br",{parentName:"p"}),"\n","Make sure port is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"10000"),"!\n",(0,i.kt)("img",{alt:"Step 3",src:t(4972).Z}),"\n",(0,i.kt)("img",{alt:"Step 4",src:t(6760).Z})))),(0,i.kt)("h3",{id:"vs"},"VS"),(0,i.kt)("p",null,"VS could potentially work with ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=GordianDotNet.VSMonoDebugger0d62"},"VSMonoDebugger")," extension, although it is very hacky compared to official support in Rider, if anyone finds a reliable way, please contribute to this page ;)"))}s.isMDXComponent=!0},395:function(e,n,t){"use strict";n.Z=t.p+"assets/images/1-fc5dee4225be6e0c4eb8b1f357d3a769.png"},7820:function(e,n,t){"use strict";n.Z=t.p+"assets/images/2-eb1a493d831f896f05956af090a187dc.png"},4972:function(e,n,t){"use strict";n.Z=t.p+"assets/images/3-def92e7d46a14a61cdc0980204cae946.png"},6760:function(e,n,t){"use strict";n.Z=t.p+"assets/images/4-2e87988bac1641904ff7630c2458451f.png"}}]);